%Part 1 - setting up github

%% reading data
braintable = readtable('BrainRegionTotalDataset_Log2FoldChange.xlsx');
diseasetable = readtable('MGIdisease.txt',...
    'delimiter', 'tab','readvariablenames', 0);
% testing if names are the same

%% string comparisons
bdt = table([], [], 'VariableNames', {'GeneName', 'DiseaseInfo'});
%initializes and empty table with two columns, one for gene names, and one
%for disease info
for i = 1:8715
    %for loop to compare each element of braintable (gene names column)
    %with all gene names in disease table to see if there is a match
    braingenestemp = strncmpi(braintable{i, 1}, diseasetable{:, 1}, 10);
    %compares strings of ith gene of braintable and all gene names of
    %disease table to find a match
    matches = max(braingenestemp);
    %finds if there is a match (if there is at least one value of 1, and
    %there will not be more matches per vector)
    
    if matches == 1
        %if there is a match then:
        temploc = find(braingenestemp == 1);
        %index location where the match occurred 
        
        GeneName = diseasetable{temploc, 1};
        %calls gene name (column 1) at that location
        
        DiseaseInfo = diseasetable{temploc, 5};
        %calls disease info (column 5) at that location 
        
        bdt = [bdt; table(GeneName, DiseaseInfo)];
        %adds a row to the table, bdt, carrying the values from above
    end;
end;

%% Pulling out a diseases genes: Parkinsons
parkinsonsgenes = table([], [], 'VariableNames', {'GeneName', 'DiseaseInfo'});

findpark = find(strncmpi(bdt{:, 2}, 'Parkinson', 9));
%indices within bdt for parkinson disease genes

    %adding the parkinson genes to their table
        GeneName = bdt{findpark, 1};
        %calls gene name (column 1) at all findpark locations
        
        DiseaseInfo = bdt{findpark, 2};
        %calls disease info (column 5) at same indices 
   
        parkinsonsgenes = [parkinsonsgenes; table(GeneName, DiseaseInfo)];
        %adds rows to the table, bdt, carrying the values from above
        
%% Making brainregion matrix
%brain table sorting (turning into a matrix and tagging genes that are
%correlated with the chosen disease. First converting to double, then
%choosing subset of genes
brainregiontable = braintable{:, 25:33};
%isolates brain region expression info into a separate table

brainregionmat = [];
%double that stores expression data in logical

for j = 1:8715
    %searches all rows of brain region table
    
    for i = 1:9
        %searches the brain region row
    
        if strncmpi(brainregiontable{j, i}, '+', 3) == 1
            %if the value of brtable is 1 then:
        
            brainregionmat(j, i) = 1;
            %brain region matrix value set as 1
        else
         brainregionmat(j, i) = 0;
            %if value is empty, there will be a zero
        end;
    end;
end;

%% Making the final matrix, genebyregion
diseasegenes = parkinsonsgenes;
numgenesspec = height(diseasegenes);
%number of genes in table
genebyregion = [];
%initializes matrix for gene by region data


%'Cerebellum', 'Corpus Callosum', 'Motor Cortex', 'Olfactory Bulb', 'Optic Nerve', 'Prefrontal Cortex', 'Striatum', 'Thalamus', 'Hippocampus'});
%1:9 names of new double's columns
for i = 1:numgenesspec
    braingenestemp = strncmpi(diseasegenes{i, 1}, braintable{:, 1}, 10); 
    matches = max(braingenestemp);
    if matches == 1;
    %if there is a disease gene match, then:
   
            temploc = find(braingenestemp == 1);
            %finds location of max of braingenestemp (where match occurred)
            
            genebyregion(i, :) = brainregionmat(temploc, :);
            %makes the ith row of genebyregion into the temploc row of
            %brainregionmat, which is arranged the same as braintable
            %(where the temploc index is from)
        end;
end;
%none of the parkinson's genes are considerably more expressed in one brain
%region than another, visually looked at braintable to confirm this result

parkinsonsmat = genebyregionmaker(parkinsonsgenes, braintable, brainregionmat);

%% Making random shuffles of genes to make sets of genebyregion matrices (for control)
 n = 9 ;
    covvalcell = cell(n, 1) ;
    %makes a cell matrix to store all matrices from the loop

%initalizing vectors to hold covariance values for each potential
%combination of brain regions(numbers here are the labels for each region
%as specified below)
%'Cerebellum', 'Corpus Callosum', 'Motor Cortex', 'Olfactory Bulb', 'Optic Nerve', 'Prefrontal Cortex', 'Striatum', 'Thalamus', 'Hippocampus'});
%1:9 names of new double's columns

numcontrols = 100;
for i = 1:numcontrols

    numgenes = 11;
    %number of genes in control shuffle

    randomperm = randperm(9669);
    randomsel = randomperm(1:numgenes);
    %random indices of genes from bdt


    randomgenetable = table([], [], 'VariableNames', {'GeneName', 'DiseaseInfo'});
    randomtablepre = bdt(randomsel,:); 
    randomgenetable = [randomtablepre]; %adds shuffled
    %genes to table

    controlgenebyregion = genebyregionmaker(randomgenetable, braintable, brainregionmat);

    controlcov = cov(controlgenebyregion);
    %covariance matrix of ith control
    
    covvalcell{i} = controlcov; 
    %stores each successive controlcov in a cell for later analysis
end;
    
%visually looked at braintable to confirm this result



%% Histograms of controls
%lol = covvalcell{1,1}(1,1); %returns 0 = OK
%indexing pattern for retrieving values within arrays within a cell

histmat1 = [];
histmat2 = [];


%matrices holding each successive rows combinations data for histograms
covtemp = zeros(9);

for i= 1:9
   covtemp(i, 1:i) = covvalcell{2, 2}(i, 1:i);
    
end;


%%
figure;
for j = 1:9
    for i = 1:100
        histmat1(1, i) = covvalcell{i, 1}(1, j);
    end;
    subplot(3, 3, j);
    histogram(histmat1, 10);
end; 

figure;
for j = 2:9
    for i = 1:100
        histmat2(1, i) = covvalcell{i, 1}(2, j);
    end;
    subplot(3, 3, j);
    histogram(histmat2, 10);
end; 






%% Measuring covariance of test set

covdisease = cov(genebyregion);

%% experimenting with tables and cells
covariancetable = {'oneby1', 
'oneby2',
'oneby3', 
'oneby4', 
'oneby5',
'oneby6',
'oneby7',
'oneby8', 
'oneby9',
'twoby2',
'twoby3',
'twoby4',
'twoby5',
'twoby6',
'twoby7',
'twoby8',
'twoby9',
'threeby3',
'threeby4',
'threeby5',
'threeby6',
'threeby7',
'threeby8',
'threeby9',
'fourby4',
'fourby5',
'fourby6',
'fourby7',
'fourby8',
'fourby9',
'fiveby5',
'fiveby6',
'fiveby7',
'fiveby8',
'fiveby9',
'sixby6',
'sixby7',
'sixby8',
'sixby9',
'sevenby7',
'sevenby8',
'sevenby9',
'eightby8',
'eightby9',
'nineby9'};

%for i = 1:45
    %searches the table of names
   
    
    
%% figures for interim report
figure;
contour(genebyregion)
xlabel('brain region')
ylabel('gene number')

for i = 1:100
    numgenes = 11;
    randomperm = randperm(9669);
    randomsel = randomperm(1:numgenes);
    randomgenetable = table([], [], 'VariableNames', {'GeneName', 'DiseaseInfo'});
    temprandomtablepre = bdt(randomsel,:); %shuffled genes
    randomgenetable(i) = [temprandomtablepre]; %adds shuffled genes to table
    controlgenebyregion = genebyregionmaker(randomgenetable, braintable,...
        brainregionmat);
end;

figure;
contour(controlgenebyregion)
xlabel('brain region')
ylabel('gene number')